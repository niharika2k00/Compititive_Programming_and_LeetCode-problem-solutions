

                                                                    VECTOR PROPERTIES
                                                                ---------------------------    

1) Initialize 1D - Vector    ==>
                                   vector<int> vec (size) 
                                   vector<int> vec (size , 0)
      

 2) Initialize 2D - Vector   ==>
                                    vector<vector<int>> vec( rows , vector<int> (cols)); 
                                    vector<vector<int>> vec( rows , vector<int> (cols, 0));       <- initialised with 0
                                    

    Max_Element   =   *max_element(vec.begin(), vec.end());


//  Search in a String 
---------------------------
  if( str.find(c) != string::npos )    

    | OR |

   int pos = str.find(':');          ---->  returns the index if found else ( -1 ) not found.  


    auto it = find(ans.begin(), ans.end(), 6 ); 

     s.substr(start_index , len_of_substring)  // Substring find 


 //  Merge Two Arrays with O(1) Space - Complexity
 -----------------------------------------------------
class Solution {
public:
    void merge(vector<int>& arr1, int len1, vector<int>& arr2, int len2) {
        
        int i = 0 ;
        for (i=0 ; i <len2 ; i++){
            arr1[len1] = arr2[i];
            len1 ++;
        }
        
         sort(arr1.begin() ,  arr1.end());
    }
};                                    


 //  SUM OF THE ARRAY / VECTOR 
 -------------------------------------

     Syntax : accumulate(first, last, sum);

     accumulate(vec.begin(), vec.end() , 0);
     accumulate(a, a + 3, sum)